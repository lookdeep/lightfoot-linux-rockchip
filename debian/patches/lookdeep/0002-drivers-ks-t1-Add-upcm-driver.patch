From: Detlev Casanova <detlev.casanova@collabora.com>
Date: Fri, 6 Jan 2023 10:17:58 -0500
Subject: drivers/ks-t1: Add upcm driver

Signed-off-by: Detlev Casanova <detlev.casanova@collabora.com>
---
 drivers/Kconfig                |   2 +
 drivers/Makefile               |   1 +
 drivers/ks-t1/Kconfig          |  10 +
 drivers/ks-t1/Makefile         |   1 +
 drivers/ks-t1/upcm/LICENSE.txt |  18 ++
 drivers/ks-t1/upcm/Makefile    |   5 +
 drivers/ks-t1/upcm/Readme.txt  |   2 +
 drivers/ks-t1/upcm/gpl-v2      | 340 +++++++++++++++++++++++
 drivers/ks-t1/upcm/upcm.c      | 595 +++++++++++++++++++++++++++++++++++++++++
 drivers/ks-t1/upcm/upcm.h      |  53 ++++
 10 files changed, 1027 insertions(+)
 create mode 100644 drivers/ks-t1/Kconfig
 create mode 100644 drivers/ks-t1/Makefile
 create mode 100755 drivers/ks-t1/upcm/LICENSE.txt
 create mode 100755 drivers/ks-t1/upcm/Makefile
 create mode 100755 drivers/ks-t1/upcm/Readme.txt
 create mode 100755 drivers/ks-t1/upcm/gpl-v2
 create mode 100755 drivers/ks-t1/upcm/upcm.c
 create mode 100755 drivers/ks-t1/upcm/upcm.h

diff --git a/drivers/Kconfig b/drivers/Kconfig
index 5a4db3e..ae82ff3 100644
--- a/drivers/Kconfig
+++ b/drivers/Kconfig
@@ -244,4 +244,6 @@ source "drivers/headset_observe/Kconfig"
 
 source "drivers/rknpu/Kconfig"
 
+source "drivers/ks-t1/Kconfig"
+
 endmenu
diff --git a/drivers/Makefile b/drivers/Makefile
index 21cb556..749464e 100644
--- a/drivers/Makefile
+++ b/drivers/Makefile
@@ -193,3 +193,4 @@ obj-$(CONFIG_RK_FLASH)		+= rkflash/
 obj-$(CONFIG_RK_HEADSET)	+= headset_observe/
 obj-$(CONFIG_RK_NAND)		+= rk_nand/
 obj-$(CONFIG_ROCKCHIP_RKNPU)	+= rknpu/
+obj-$(CONFIG_ARCH_ROCKCHIP)	+= ks-t1/
diff --git a/drivers/ks-t1/Kconfig b/drivers/ks-t1/Kconfig
new file mode 100644
index 0000000..87e78ea
--- /dev/null
+++ b/drivers/ks-t1/Kconfig
@@ -0,0 +1,10 @@
+menu "KS-T1 drivers"
+
+config ALSA_UPCM
+	bool "ALSA UPCM driver"
+	depends on ARCH_ROCKCHIP
+	default y
+	help
+	  Build the upcm driver for the KS-T1 board
+
+endmenu
diff --git a/drivers/ks-t1/Makefile b/drivers/ks-t1/Makefile
new file mode 100644
index 0000000..87469b6
--- /dev/null
+++ b/drivers/ks-t1/Makefile
@@ -0,0 +1 @@
+obj-y	+= upcm/
diff --git a/drivers/ks-t1/upcm/LICENSE.txt b/drivers/ks-t1/upcm/LICENSE.txt
new file mode 100755
index 0000000..121df6f
--- /dev/null
+++ b/drivers/ks-t1/upcm/LICENSE.txt
@@ -0,0 +1,18 @@
+UPCM Driver
+
+Copyright (C) Cambridge Silicon Radio Limited 2005-2012
+
+This program is free software; you can redistribute it and/or
+modify it under the terms of the GNU General Public License
+as published by the Free Software Foundation; either version 2
+of the License, or (at your option) any later version.
+
+This program is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with this program; if not, write to the Free Software
+Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
+
diff --git a/drivers/ks-t1/upcm/Makefile b/drivers/ks-t1/upcm/Makefile
new file mode 100755
index 0000000..dd35e87
--- /dev/null
+++ b/drivers/ks-t1/upcm/Makefile
@@ -0,0 +1,5 @@
+########################
+# CSR UPCM ALSA driver #
+########################
+
+obj-${CONFIG_ALSA_UPCM} += upcm.o
diff --git a/drivers/ks-t1/upcm/Readme.txt b/drivers/ks-t1/upcm/Readme.txt
new file mode 100755
index 0000000..8c7e42b
--- /dev/null
+++ b/drivers/ks-t1/upcm/Readme.txt
@@ -0,0 +1,2 @@
+±‡“Î£∫
+	make ARCH=arm CROSS_COMPILE=/root/Desktop/myir_4418/android/prebuilts/gcc/linux-x86/arm/arm-eabi-4.7/bin/arm-eabi-
\ No newline at end of file
diff --git a/drivers/ks-t1/upcm/gpl-v2 b/drivers/ks-t1/upcm/gpl-v2
new file mode 100755
index 0000000..1f963da
--- /dev/null
+++ b/drivers/ks-t1/upcm/gpl-v2
@@ -0,0 +1,340 @@
+                    GNU GENERAL PUBLIC LICENSE
+                       Version 2, June 1991
+
+ Copyright (C) 1989, 1991 Free Software Foundation, Inc.,
+ 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ Everyone is permitted to copy and distribute verbatim copies
+ of this license document, but changing it is not allowed.
+
+                            Preamble
+
+  The licenses for most software are designed to take away your
+freedom to share and change it.  By contrast, the GNU General Public
+License is intended to guarantee your freedom to share and change free
+software--to make sure the software is free for all its users.  This
+General Public License applies to most of the Free Software
+Foundation's software and to any other program whose authors commit to
+using it.  (Some other Free Software Foundation software is covered by
+the GNU Lesser General Public License instead.)  You can apply it to
+your programs, too.
+
+  When we speak of free software, we are referring to freedom, not
+price.  Our General Public Licenses are designed to make sure that you
+have the freedom to distribute copies of free software (and charge for
+this service if you wish), that you receive source code or can get it
+if you want it, that you can change the software or use pieces of it
+in new free programs; and that you know you can do these things.
+
+  To protect your rights, we need to make restrictions that forbid
+anyone to deny you these rights or to ask you to surrender the rights.
+These restrictions translate to certain responsibilities for you if you
+distribute copies of the software, or if you modify it.
+
+  For example, if you distribute copies of such a program, whether
+gratis or for a fee, you must give the recipients all the rights that
+you have.  You must make sure that they, too, receive or can get the
+source code.  And you must show them these terms so they know their
+rights.
+
+  We protect your rights with two steps: (1) copyright the software, and
+(2) offer you this license which gives you legal permission to copy,
+distribute and/or modify the software.
+
+  Also, for each author's protection and ours, we want to make certain
+that everyone understands that there is no warranty for this free
+software.  If the software is modified by someone else and passed on, we
+want its recipients to know that what they have is not the original, so
+that any problems introduced by others will not reflect on the original
+authors' reputations.
+
+  Finally, any free program is threatened constantly by software
+patents.  We wish to avoid the danger that redistributors of a free
+program will individually obtain patent licenses, in effect making the
+program proprietary.  To prevent this, we have made it clear that any
+patent must be licensed for everyone's free use or not licensed at all.
+
+  The precise terms and conditions for copying, distribution and
+modification follow.
+
+                    GNU GENERAL PUBLIC LICENSE
+   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
+
+  0. This License applies to any program or other work which contains
+a notice placed by the copyright holder saying it may be distributed
+under the terms of this General Public License.  The "Program", below,
+refers to any such program or work, and a "work based on the Program"
+means either the Program or any derivative work under copyright law:
+that is to say, a work containing the Program or a portion of it,
+either verbatim or with modifications and/or translated into another
+language.  (Hereinafter, translation is included without limitation in
+the term "modification".)  Each licensee is addressed as "you".
+
+Activities other than copying, distribution and modification are not
+covered by this License; they are outside its scope.  The act of
+running the Program is not restricted, and the output from the Program
+is covered only if its contents constitute a work based on the
+Program (independent of having been made by running the Program).
+Whether that is true depends on what the Program does.
+
+  1. You may copy and distribute verbatim copies of the Program's
+source code as you receive it, in any medium, provided that you
+conspicuously and appropriately publish on each copy an appropriate
+copyright notice and disclaimer of warranty; keep intact all the
+notices that refer to this License and to the absence of any warranty;
+and give any other recipients of the Program a copy of this License
+along with the Program.
+
+You may charge a fee for the physical act of transferring a copy, and
+you may at your option offer warranty protection in exchange for a fee.
+
+  2. You may modify your copy or copies of the Program or any portion
+of it, thus forming a work based on the Program, and copy and
+distribute such modifications or work under the terms of Section 1
+above, provided that you also meet all of these conditions:
+
+    a) You must cause the modified files to carry prominent notices
+    stating that you changed the files and the date of any change.
+
+    b) You must cause any work that you distribute or publish, that in
+    whole or in part contains or is derived from the Program or any
+    part thereof, to be licensed as a whole at no charge to all third
+    parties under the terms of this License.
+
+    c) If the modified program normally reads commands interactively
+    when run, you must cause it, when started running for such
+    interactive use in the most ordinary way, to print or display an
+    announcement including an appropriate copyright notice and a
+    notice that there is no warranty (or else, saying that you provide
+    a warranty) and that users may redistribute the program under
+    these conditions, and telling the user how to view a copy of this
+    License.  (Exception: if the Program itself is interactive but
+    does not normally print such an announcement, your work based on
+    the Program is not required to print an announcement.)
+
+These requirements apply to the modified work as a whole.  If
+identifiable sections of that work are not derived from the Program,
+and can be reasonably considered independent and separate works in
+themselves, then this License, and its terms, do not apply to those
+sections when you distribute them as separate works.  But when you
+distribute the same sections as part of a whole which is a work based
+on the Program, the distribution of the whole must be on the terms of
+this License, whose permissions for other licensees extend to the
+entire whole, and thus to each and every part regardless of who wrote it.
+
+Thus, it is not the intent of this section to claim rights or contest
+your rights to work written entirely by you; rather, the intent is to
+exercise the right to control the distribution of derivative or
+collective works based on the Program.
+
+In addition, mere aggregation of another work not based on the Program
+with the Program (or with a work based on the Program) on a volume of
+a storage or distribution medium does not bring the other work under
+the scope of this License.
+
+  3. You may copy and distribute the Program (or a work based on it,
+under Section 2) in object code or executable form under the terms of
+Sections 1 and 2 above provided that you also do one of the following:
+
+    a) Accompany it with the complete corresponding machine-readable
+    source code, which must be distributed under the terms of Sections
+    1 and 2 above on a medium customarily used for software interchange; or,
+
+    b) Accompany it with a written offer, valid for at least three
+    years, to give any third party, for a charge no more than your
+    cost of physically performing source distribution, a complete
+    machine-readable copy of the corresponding source code, to be
+    distributed under the terms of Sections 1 and 2 above on a medium
+    customarily used for software interchange; or,
+
+    c) Accompany it with the information you received as to the offer
+    to distribute corresponding source code.  (This alternative is
+    allowed only for noncommercial distribution and only if you
+    received the program in object code or executable form with such
+    an offer, in accord with Subsection b above.)
+
+The source code for a work means the preferred form of the work for
+making modifications to it.  For an executable work, complete source
+code means all the source code for all modules it contains, plus any
+associated interface definition files, plus the scripts used to
+control compilation and installation of the executable.  However, as a
+special exception, the source code distributed need not include
+anything that is normally distributed (in either source or binary
+form) with the major components (compiler, kernel, and so on) of the
+operating system on which the executable runs, unless that component
+itself accompanies the executable.
+
+If distribution of executable or object code is made by offering
+access to copy from a designated place, then offering equivalent
+access to copy the source code from the same place counts as
+distribution of the source code, even though third parties are not
+compelled to copy the source along with the object code.
+
+  4. You may not copy, modify, sublicense, or distribute the Program
+except as expressly provided under this License.  Any attempt
+otherwise to copy, modify, sublicense or distribute the Program is
+void, and will automatically terminate your rights under this License.
+However, parties who have received copies, or rights, from you under
+this License will not have their licenses terminated so long as such
+parties remain in full compliance.
+
+  5. You are not required to accept this License, since you have not
+signed it.  However, nothing else grants you permission to modify or
+distribute the Program or its derivative works.  These actions are
+prohibited by law if you do not accept this License.  Therefore, by
+modifying or distributing the Program (or any work based on the
+Program), you indicate your acceptance of this License to do so, and
+all its terms and conditions for copying, distributing or modifying
+the Program or works based on it.
+
+  6. Each time you redistribute the Program (or any work based on the
+Program), the recipient automatically receives a license from the
+original licensor to copy, distribute or modify the Program subject to
+these terms and conditions.  You may not impose any further
+restrictions on the recipients' exercise of the rights granted herein.
+You are not responsible for enforcing compliance by third parties to
+this License.
+
+  7. If, as a consequence of a court judgment or allegation of patent
+infringement or for any other reason (not limited to patent issues),
+conditions are imposed on you (whether by court order, agreement or
+otherwise) that contradict the conditions of this License, they do not
+excuse you from the conditions of this License.  If you cannot
+distribute so as to satisfy simultaneously your obligations under this
+License and any other pertinent obligations, then as a consequence you
+may not distribute the Program at all.  For example, if a patent
+license would not permit royalty-free redistribution of the Program by
+all those who receive copies directly or indirectly through you, then
+the only way you could satisfy both it and this License would be to
+refrain entirely from distribution of the Program.
+
+If any portion of this section is held invalid or unenforceable under
+any particular circumstance, the balance of the section is intended to
+apply and the section as a whole is intended to apply in other
+circumstances.
+
+It is not the purpose of this section to induce you to infringe any
+patents or other property right claims or to contest validity of any
+such claims; this section has the sole purpose of protecting the
+integrity of the free software distribution system, which is
+implemented by public license practices.  Many people have made
+generous contributions to the wide range of software distributed
+through that system in reliance on consistent application of that
+system; it is up to the author/donor to decide if he or she is willing
+to distribute software through any other system and a licensee cannot
+impose that choice.
+
+This section is intended to make thoroughly clear what is believed to
+be a consequence of the rest of this License.
+
+  8. If the distribution and/or use of the Program is restricted in
+certain countries either by patents or by copyrighted interfaces, the
+original copyright holder who places the Program under this License
+may add an explicit geographical distribution limitation excluding
+those countries, so that distribution is permitted only in or among
+countries not thus excluded.  In such case, this License incorporates
+the limitation as if written in the body of this License.
+
+  9. The Free Software Foundation may publish revised and/or new versions
+of the General Public License from time to time.  Such new versions will
+be similar in spirit to the present version, but may differ in detail to
+address new problems or concerns.
+
+Each version is given a distinguishing version number.  If the Program
+specifies a version number of this License which applies to it and "any
+later version", you have the option of following the terms and conditions
+either of that version or of any later version published by the Free
+Software Foundation.  If the Program does not specify a version number of
+this License, you may choose any version ever published by the Free Software
+Foundation.
+
+  10. If you wish to incorporate parts of the Program into other free
+programs whose distribution conditions are different, write to the author
+to ask for permission.  For software which is copyrighted by the Free
+Software Foundation, write to the Free Software Foundation; we sometimes
+make exceptions for this.  Our decision will be guided by the two goals
+of preserving the free status of all derivatives of our free software and
+of promoting the sharing and reuse of software generally.
+
+                            NO WARRANTY
+
+  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
+FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
+OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
+PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
+OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
+TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
+PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
+REPAIR OR CORRECTION.
+
+  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
+WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
+REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
+INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
+OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
+TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
+YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
+PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
+POSSIBILITY OF SUCH DAMAGES.
+
+                     END OF TERMS AND CONDITIONS
+
+            How to Apply These Terms to Your New Programs
+
+  If you develop a new program, and you want it to be of the greatest
+possible use to the public, the best way to achieve this is to make it
+free software which everyone can redistribute and change under these terms.
+
+  To do so, attach the following notices to the program.  It is safest
+to attach them to the start of each source file to most effectively
+convey the exclusion of warranty; and each file should have at least
+the "copyright" line and a pointer to where the full notice is found.
+
+    <one line to give the program's name and a brief idea of what it does.>
+    Copyright (C) <year>  <name of author>
+
+    This program is free software; you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation; either version 2 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License along
+    with this program; if not, write to the Free Software Foundation, Inc.,
+    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+
+Also add information on how to contact you by electronic and paper mail.
+
+If the program is interactive, make it output a short notice like this
+when it starts in an interactive mode:
+
+    Gnomovision version 69, Copyright (C) year name of author
+    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
+    This is free software, and you are welcome to redistribute it
+    under certain conditions; type `show c' for details.
+
+The hypothetical commands `show w' and `show c' should show the appropriate
+parts of the General Public License.  Of course, the commands you use may
+be called something other than `show w' and `show c'; they could even be
+mouse-clicks or menu items--whatever suits your program.
+
+You should also get your employer (if you work as a programmer) or your
+school, if any, to sign a "copyright disclaimer" for the program, if
+necessary.  Here is a sample; alter the names:
+
+  Yoyodyne, Inc., hereby disclaims all copyright interest in the program
+  `Gnomovision' (which makes passes at compilers) written by James Hacker.
+
+  <signature of Ty Coon>, 1 April 1989
+  Ty Coon, President of Vice
+
+This General Public License does not permit incorporating your program into
+proprietary programs.  If your program is a subroutine library, you may
+consider it more useful to permit linking proprietary applications with the
+library.  If this is what you want to do, use the GNU Lesser General
+Public License instead of this License.
+
diff --git a/drivers/ks-t1/upcm/upcm.c b/drivers/ks-t1/upcm/upcm.c
new file mode 100755
index 0000000..c67910f6
--- /dev/null
+++ b/drivers/ks-t1/upcm/upcm.c
@@ -0,0 +1,595 @@
+/*
+* ---------------------------------------------------------------------------
+* FILE: upcm.c
+*
+* PURPOSE:
+
+* Copyright (C) 2012 by Cambridge Silicon Radio Ltd.
+*
+* Refer to LICENSE.txt included with this source code for details on
+* the license terms.
+*
+* ---------------------------------------------------------------------------
+*/
+
+#include <linux/init.h>
+#include <linux/slab.h>
+#include <linux/device.h>
+#include <linux/fs.h>
+#include <linux/miscdevice.h>
+#include <linux/module.h>
+#include <linux/mutex.h>
+#include <linux/poll.h>
+#include <linux/sched.h>
+#include <linux/spinlock.h>
+#include <linux/switch.h>
+#include <linux/wait.h>
+#include <linux/of.h>
+#include <linux/platform_device.h>
+
+#include "upcm.h"
+
+#include <sound/core.h>
+#include <sound/pcm.h>
+#include <sound/pcm_params.h>
+
+#include <linux/delay.h>
+
+#define UPCM_NAME	"upcm"
+
+//#define ENABLE_UPCM_LOG
+
+static struct switch_dev  audio_switch_dev;
+
+#define UPCM_CARD_IDX  -1
+
+struct snd_upcm_audio {
+	struct snd_card *card;
+	struct snd_upcm_stream *as;
+	struct upcm_device * device;
+};
+
+struct snd_upcm_stream {
+	struct snd_upcm_audio *audio_dev;
+	struct snd_pcm *pcm;
+	struct snd_pcm_substream *pcm_substream;
+	
+	unsigned int hwptr_done;	/* processed byte position in the buffer */
+	unsigned int transfer_done;		/* processed frames since last period update */
+	spinlock_t lock;
+};
+
+#define UPCM_OUTPUT_BUFSIZE	4
+
+#define MAX_BUFFER_SIZE  (1024*4)
+struct upcm_device {
+	struct mutex lock;
+	spinlock_t qlock;
+	bool trigger_started;
+	bool file_opened;
+	struct device *parent;
+	struct snd_card *card;
+	struct snd_upcm_audio* audio_dev;
+	struct timer_list timer;
+	__u8 input_buffer[MAX_BUFFER_SIZE];
+};
+
+static struct upcm_device upcm_dev;
+
+static struct snd_pcm_hardware snd_mychip_capture_hw = {
+	.info = (SNDRV_PCM_INFO_INTERLEAVED),
+	.formats =          SNDRV_PCM_FMTBIT_S16_LE,	// BE or LE?
+	.rates =            SNDRV_PCM_RATE_48000 ,//| SNDRV_PCM_RATE_16000,
+	.rate_min =         8000,
+	.rate_max =         48000,
+	.channels_min =     1,
+	.channels_max =     1,
+	.buffer_bytes_max =	1024 * 1024,
+	.period_bytes_min =	64,
+	.period_bytes_max =	512 * 1024 * 2,
+	.periods_min =		2,
+	.periods_max =		1024,
+};
+
+static int snd_u_capture_open(struct snd_pcm_substream *substream)
+{
+	struct snd_upcm_stream *as = NULL;
+	struct snd_pcm_runtime *runtime = NULL;
+	mutex_lock(&upcm_dev.lock);
+	as = substream->private_data;
+	runtime = substream->runtime;
+	runtime->hw = snd_mychip_capture_hw;
+	as->pcm_substream = substream;
+	mutex_unlock(&upcm_dev.lock);
+	printk("UPCM : snd_u_capture_open\n");
+	return 0;
+}
+
+static int snd_u_capture_close(struct snd_pcm_substream *substream)
+{
+	mutex_lock(&upcm_dev.lock);
+	//substream->pcm->private_data = NULL;
+	mutex_unlock(&upcm_dev.lock);
+	printk("UPCM : snd_u_capture_close\n");
+	return 0;
+}
+
+static int snd_u_hw_params(struct snd_pcm_substream *substream,
+			     struct snd_pcm_hw_params *hw_params)
+{
+	//struct upcm_device *upcm = substream->pcm->private_data;
+	unsigned int channels, rate, format, period_bytes, buffer_bytes;
+	int ret = 0;
+
+	format = params_format(hw_params);
+	rate = params_rate(hw_params);
+	channels = params_channels(hw_params);
+	period_bytes = params_period_bytes(hw_params);
+	buffer_bytes = params_buffer_bytes(hw_params);
+
+	printk("UPCM : snd_u_hw_params ");
+	printk("format %d, rate %d, channels %d, period_bytes %d, buffer_bytes %d\n",
+		format, rate, channels, period_bytes, buffer_bytes);
+
+	ret = snd_pcm_lib_alloc_vmalloc_buffer(substream,
+					       params_buffer_bytes(hw_params));
+
+	format = params_format(hw_params);
+	rate = params_rate(hw_params);
+	channels = params_channels(hw_params);
+	period_bytes = params_period_bytes(hw_params);
+	buffer_bytes = params_buffer_bytes(hw_params);
+
+	printk("UPCM: format 0x%x, rate %d, channels %d\n", format, rate, channels);
+	
+	if (ret < 0){
+		printk("UPCM: snd_pcm_lib_alloc_vmalloc_buffer failed %d\n", ret);
+	}
+	
+	return ret;
+}
+
+static int snd_u_hw_free(struct snd_pcm_substream *substream)
+{
+	int ret ; 
+	mutex_lock(&upcm_dev.lock);
+	ret = snd_pcm_lib_free_vmalloc_buffer(substream);
+	mutex_unlock(&upcm_dev.lock);
+	printk("UPCM : snd_u_hw_free\n");
+	return ret;
+}
+
+static int snd_u_pcm_prepare(struct snd_pcm_substream *substream)
+{
+	struct snd_upcm_stream *as = NULL;
+	mutex_lock(&upcm_dev.lock);
+	as  = substream->private_data;
+	as->hwptr_done = 0;
+	as->transfer_done = 0;
+	mutex_unlock(&upcm_dev.lock);
+	printk("UPCM : snd_u_pcm_prepare\n");
+	return 0;
+}
+
+static void start_idle_timer(void);
+static void stop_idle_timer(void);
+
+static  void trigger_start(bool start)
+{
+	spin_lock(&upcm_dev.qlock);
+	upcm_dev.trigger_started = start;
+	if (start && !upcm_dev.file_opened) {
+		memset(upcm_dev.input_buffer, 0, sizeof(upcm_dev.input_buffer));
+		start_idle_timer();
+	}
+	else if (!start)
+		stop_idle_timer();
+	spin_unlock(&upcm_dev.qlock);
+}
+
+static int snd_u_substream_capture_trigger(struct snd_pcm_substream *substream, int cmd)
+{
+	printk("UPCM : snd_u_substream_capture_trigger, cmd %d\n", cmd);
+
+	switch (cmd) {
+	case SNDRV_PCM_TRIGGER_START:
+		printk("UPCM: SNDRV_PCM_TRIGGER_START\n");
+	///	mutex_lock(&upcm_dev.lock);
+		trigger_start(true);
+	//	mutex_unlock(&upcm_dev.lock);
+		break;
+	case SNDRV_PCM_TRIGGER_STOP:
+		printk("UPCM: SNDRV_PCM_TRIGGER_STOP\n");
+	//	mutex_lock(&upcm_dev.lock);
+		trigger_start(false);
+	//	mutex_unlock(&upcm_dev.lock);
+		break;
+	case SNDRV_PCM_TRIGGER_PAUSE_PUSH:
+		printk("UPCM: SNDRV_PCM_TRIGGER_PAUSE_PUSH\n");
+		break;
+	case SNDRV_PCM_TRIGGER_PAUSE_RELEASE:
+		printk("UPCM: SNDRV_PCM_TRIGGER_PAUSE_RELEASE\n");
+		break;
+	}
+
+	return 0;
+}
+
+static snd_pcm_uframes_t snd_u_pcm_pointer(struct snd_pcm_substream *substream)
+{
+	struct snd_upcm_stream *as = substream->private_data;
+	unsigned int hwptr_done;
+
+	#ifdef ENABLE_UPCM_LOG
+	printk("UPCM : snd_u_pcm_pointer\n");
+	#endif
+	//mutex_lock(&upcm_dev.lock);
+	spin_lock(&as->lock);
+	hwptr_done = as->hwptr_done;
+	spin_unlock(&as->lock);
+	//mutex_unlock(&upcm_dev.lock);
+	return hwptr_done / (substream->runtime->frame_bits >> 3);
+}
+
+static struct snd_pcm_ops snd_u_capture_ops = {
+	.open =		snd_u_capture_open,
+	.close =	snd_u_capture_close,
+	.ioctl =	snd_pcm_lib_ioctl,
+	.hw_params =	snd_u_hw_params,
+	.hw_free =	snd_u_hw_free,
+	.prepare =	snd_u_pcm_prepare,
+	.trigger =	snd_u_substream_capture_trigger,
+	.pointer =	snd_u_pcm_pointer,
+	.page =		snd_pcm_lib_get_vmalloc_page,
+	//.mmap =		snd_pcm_lib_mmap_vmalloc,
+};
+
+static int snd_u_audio_dev_free(struct snd_device *device)
+{
+	struct snd_upcm_audio *audio_dev = device->device_data;
+
+	kfree(audio_dev);
+	
+	return 0;
+}
+
+static void snd_u_audio_pcm_free(struct snd_pcm *pcm)
+{
+	struct snd_upcm_stream *stream = pcm->private_data;
+	if (stream) {
+		kfree(stream);
+	}
+}
+
+static int snd_upcm_create_streams(struct snd_upcm_audio *audio_dev)
+{
+	struct snd_pcm *	pcm;
+	struct snd_upcm_stream *as;
+	int ret;
+	
+	/* create a new pcm */
+	as = kzalloc(sizeof(*as), GFP_KERNEL);
+	if (!as)
+		return -ENOMEM;
+	
+	as->audio_dev = audio_dev;
+	
+	ret = snd_pcm_new(audio_dev->card, "BLE Audio", 0, 0, 1, &pcm);
+	if (ret < 0) {
+		kfree(as);
+		return ret;
+	}
+	
+	as->pcm = pcm;
+	pcm->private_data = as;
+	pcm->private_free = snd_u_audio_pcm_free;
+	pcm->info_flags = 0;
+	strcpy(pcm->name, "BLE Audio");
+	spin_lock_init(&as->lock);
+
+	audio_dev->as = as;
+		
+	snd_pcm_set_ops(pcm, SNDRV_PCM_STREAM_CAPTURE, &snd_u_capture_ops);
+
+	return ret;
+}
+
+
+static int upcm_dev_input_lock(struct upcm_device *upcm, unsigned char * cp, unsigned int bytes)
+{
+	struct snd_upcm_stream *as = upcm->audio_dev->as;
+	struct snd_pcm_runtime *runtime;
+	unsigned int stride, frames, /*bytes,*/ oldptr;
+	unsigned long flags;
+	int period_elapsed = 0;
+
+	spin_lock(&upcm_dev.qlock);
+	if (!upcm_dev.trigger_started)
+	{
+		spin_unlock(&upcm_dev.qlock);
+		return bytes;
+	}
+	spin_unlock(&upcm_dev.qlock);
+
+
+	if(as->pcm_substream && as->pcm_substream->runtime && as->pcm_substream->runtime->dma_area) 
+	{
+		runtime = as->pcm_substream->runtime;
+		stride = runtime->frame_bits >> 3;
+		spin_lock_irqsave(&as->lock, flags);
+		oldptr = as->hwptr_done;
+		as->hwptr_done += bytes;
+		if (as->hwptr_done >= runtime->buffer_size * stride)
+			as->hwptr_done -= runtime->buffer_size * stride;
+		frames = (bytes + (oldptr % stride)) / stride;
+		as->transfer_done += frames;
+		if (as->transfer_done >= runtime->period_size) {
+			as->transfer_done -= runtime->period_size;
+			period_elapsed = 1;
+		}
+		spin_unlock_irqrestore(&as->lock, flags);
+
+		/* copy data */
+		if (oldptr + bytes > runtime->buffer_size * stride) {
+			unsigned int bytes1 =
+					runtime->buffer_size * stride - oldptr;
+			memcpy(runtime->dma_area + oldptr, cp, bytes1);
+			memcpy(runtime->dma_area, cp + bytes1, bytes - bytes1);
+		} else {
+			memcpy(runtime->dma_area + oldptr, cp, bytes);
+		}
+
+		if (period_elapsed)
+			snd_pcm_period_elapsed(as->pcm_substream);
+	} else
+		printk("UPCM: pcm_substream not allocated yet, discard!\n");
+	
+	return 0;
+}
+
+/********************************************************************************************************************
+* UPCM Char Interface
+*******************************************************************************************************************/
+
+
+static void start_idle_timer()
+{
+	//printk("START IDLE TIMER HZ = %d\n", HZ); 
+	upcm_dev.timer.expires = jiffies +  ( HZ * MAX_BUFFER_SIZE  / 2 / 16000 ) ;
+	printk("START IDLE TIMER HZ = %d 	jiffies = %ld upcm_dev.timer.expires = %ld\n", HZ, jiffies, upcm_dev.timer.expires); 
+	add_timer(&upcm_dev.timer);
+}
+
+static void stop_idle_timer()
+{
+	del_timer(&upcm_dev.timer);
+}
+
+
+static void upcm_idle_timer_function(struct timer_list *timer) 
+{
+	spin_lock(&upcm_dev.qlock);
+	if (!upcm_dev.trigger_started || upcm_dev.file_opened )
+	{
+		spin_unlock(&upcm_dev.qlock);
+		return;
+	}
+
+	spin_unlock(&upcm_dev.qlock);
+	start_idle_timer();
+//	mutex_lock(&upcm_dev.lock);
+//	memset(upcm_dev.input_buffer, 0, sizeof(upcm_dev.input_buffer));
+	upcm_dev_input_lock(&upcm_dev, upcm_dev.input_buffer, sizeof(upcm_dev.input_buffer));
+//	mutex_unlock(&upcm_dev.lock);
+}
+
+
+static int upcm_char_open(struct inode *inode, struct file *file)
+{
+	spin_lock(&upcm_dev.qlock); 
+	if (upcm_dev.file_opened) 
+	{
+		spin_unlock(&upcm_dev.qlock);
+		return -EBUSY;
+	}
+	upcm_dev.file_opened = true;
+	stop_idle_timer();
+	spin_unlock(&upcm_dev.qlock);
+	
+	file->private_data = &upcm_dev;
+	nonseekable_open(inode, file);
+	switch_set_state(&audio_switch_dev, 1);
+	return 0;
+}
+
+static int upcm_char_release(struct inode *inode, struct file *file)
+{
+	printk("UPCM: upcm_char_release\n");
+	file->private_data = NULL;
+	switch_set_state(&audio_switch_dev, 0);
+
+	spin_lock(&upcm_dev.qlock);
+	upcm_dev.file_opened = false;
+	if (upcm_dev.trigger_started) {
+		memset(upcm_dev.input_buffer, 0, sizeof(upcm_dev.input_buffer));
+		start_idle_timer();
+	}
+	spin_unlock(&upcm_dev.qlock);
+
+	return 0;
+}
+
+static ssize_t upcm_char_read(struct file *file, char __user *buffer,
+				size_t count, loff_t *ppos)
+{
+	return count;
+}
+
+
+static ssize_t upcm_char_write(struct file *file, const char __user *buffer,
+				size_t count, loff_t *ppos)
+{
+	struct upcm_device *dev = file->private_data;
+	size_t len;
+
+	len = min(sizeof(dev->input_buffer), count);
+	if (copy_from_user(dev->input_buffer, buffer, len) )
+		return -EFAULT;
+
+	mutex_lock(&dev->lock);
+	upcm_dev_input_lock(dev, dev->input_buffer, len);
+	mutex_unlock(&dev->lock);
+	return len;
+}
+
+static unsigned int upcm_char_poll(struct file *file, poll_table *wait)
+{
+	return -EOPNOTSUPP;
+}
+
+
+static const struct file_operations upcm_fops = {
+	.owner		= THIS_MODULE,
+	.open		= upcm_char_open,
+	.release	= upcm_char_release,
+	.read		= upcm_char_read,
+	.write		= upcm_char_write,
+	.poll		= upcm_char_poll,
+	.llseek		= no_llseek,
+};
+
+static struct miscdevice upcm_misc = {
+	.fops		= &upcm_fops,
+	.minor		= MISC_DYNAMIC_MINOR,
+	.name		= UPCM_NAME,
+};
+
+
+
+static int __init upcm_dev_create(struct device *dev)
+{
+	struct snd_card *card = NULL;
+	struct snd_upcm_audio *audio_dev = NULL;
+	int ret;
+	char *card_name = "CSRUPCM";
+	static struct snd_device_ops ops = {
+		.dev_free =	snd_u_audio_dev_free,
+	};
+	
+	memset(&upcm_dev, 0, sizeof(upcm_dev));
+	mutex_init(&upcm_dev.lock);
+	spin_lock_init(&upcm_dev.qlock);
+
+	ret = snd_card_new(dev, UPCM_CARD_IDX, NULL, THIS_MODULE, 0, &card);
+	if (ret < 0) {
+		printk("UPCM: snd_card_new failed %d\n", ret);
+	//	goto unlock;
+		return ret;
+	}
+	
+	audio_dev = kzalloc(sizeof(*audio_dev), GFP_KERNEL);
+	if (! audio_dev) {
+		printk("UPCM: device malloc failed\n");
+		goto err_free;
+	}
+	
+	audio_dev->card = card;
+	audio_dev->device = &upcm_dev;
+	
+	if ((ret = snd_device_new(card, SNDRV_DEV_LOWLEVEL, audio_dev, &ops)) < 0) {
+		printk("UPCM: snd_device_new failed %d\n", ret);
+		kfree(audio_dev);
+		audio_dev = NULL;
+		goto err_free;
+	}
+
+	if((ret = snd_upcm_create_streams(audio_dev)) < 0){
+		printk("UPCM: snd_upcm_create_streams failed %d\n", ret);
+		goto err_free;
+	}
+
+	if ((ret = snd_card_register(card)) < 0) {
+		printk("UPCM: snd_card_register failed %d\n", ret);
+		goto err_free;
+	}
+
+	strscpy(card->driver, card_name, sizeof(card->driver));
+	strscpy(card->shortname, card_name, sizeof(card->shortname));
+	sprintf(card->longname, "%s %i", card_name, card->dev->id);
+
+	upcm_dev.card = card;
+	upcm_dev.audio_dev = audio_dev;	
+	//upcm_dev.running = true;
+
+	timer_setup(&upcm_dev.timer, upcm_idle_timer_function,
+	             0); 	
+
+
+	printk("UPCM: upcm_dev_create successful\n");
+	return 0;
+err_free:
+	snd_card_free(card);
+	//upcm_dev.running = false;
+	return ret;
+}
+
+static int __exit upcm_dev_destroy(void)
+{
+	int ret;
+	mutex_lock(&upcm_dev.lock);
+	ret = snd_card_free_when_closed(upcm_dev.card);
+	if (ret < 0) {
+		printk("UPCM: snd_card_free_when_closed failed %d\n", ret);
+		//goto unlock;
+		return ret;
+	}
+
+	mutex_unlock(&upcm_dev.lock);
+	return ret;
+}
+
+static int upcm_probe(struct platform_device *pdev)
+{
+	struct device *dev = &pdev->dev;
+
+	printk("UPCM : module init\n");
+
+	upcm_dev_create(dev);
+	memset(&audio_switch_dev, 0, sizeof(audio_switch_dev));
+	audio_switch_dev.name = "ble_audio";
+	switch_dev_register(&audio_switch_dev);
+	return misc_register(&upcm_misc);
+}
+
+static int upcm_remove(struct platform_device *pdev)
+{
+	printk("UPCM : module exit\n");
+	switch_dev_unregister(&audio_switch_dev);
+	misc_deregister(&upcm_misc);
+	upcm_dev_destroy();
+	return 0;
+}
+
+#ifdef CONFIG_OF
+static const struct of_device_id upcm_of_match[] = {
+	{ .compatible = "minrray,upcm", },
+	{ }
+};
+MODULE_DEVICE_TABLE(of, upcm_of_match);
+#endif
+
+static struct platform_driver __refdata upcm_driver = {
+	.driver = {
+		.name    = "upcm",
+		.owner  = THIS_MODULE,
+		.of_match_table = of_match_ptr(upcm_of_match),
+	},
+	.probe  = upcm_probe,
+	.remove = upcm_remove,
+};
+module_platform_driver(upcm_driver);
+
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("Cambridge Silicon Radio Ltd.");
+MODULE_DESCRIPTION("ALSA Driver for HOG Audio");
+
diff --git a/drivers/ks-t1/upcm/upcm.h b/drivers/ks-t1/upcm/upcm.h
new file mode 100755
index 0000000..cb45f38
--- /dev/null
+++ b/drivers/ks-t1/upcm/upcm.h
@@ -0,0 +1,53 @@
+/*
+* ---------------------------------------------------------------------------
+* FILE: upcm.h
+*
+* PURPOSE:
+
+* Copyright (C) 2012 by Cambridge Silicon Radio Ltd.
+*
+* Refer to LICENSE.txt included with this source code for details on
+* the license terms.
+*
+* ---------------------------------------------------------------------------
+*/
+
+#ifndef _UPCM_H_
+#define _UPCM_H_
+
+#include <linux/types.h>
+
+enum upcm_event_type {
+	// Input event
+	UPCM_CREATE,
+	UPCM_DESTROY,
+	UPCM_INPUT,
+
+	// Output event
+	UPCM_TRIGGER_START,
+	UPCM_TRIGGER_STOP,
+	UPCM_OUTPUT,	
+};
+
+#define UPCM_DATA_MAX 256
+
+struct upcm_input_req {
+	__u8 data[UPCM_DATA_MAX];
+	__u16 size;
+} __attribute__((packed));
+
+struct upcm_output_req {
+	__u8 data[UPCM_DATA_MAX];
+	__u16 size;
+} __attribute__((packed));
+
+struct upcm_event {
+	__u32 type;
+
+	union {
+		struct upcm_input_req input;
+		struct upcm_output_req output;
+	} u;
+} __attribute__((packed));
+
+#endif
